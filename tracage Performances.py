import numpy as np
import matplotlib.pyplot as plt
"""
# Exemple de données : temps de résolution des différentes méthodes
timeS =[]
timeL =[]
timeD =[]
timeP =[]
timeH =[]

timeS+=[0.051, 0.093, 0.141, 31.397, 31.215, 0.227, 0.546, 0.302, 27.712, 0.361, 1.167, 1.606, 30.073, 0.251, 30.093, 30.068, 10.696, 0.569, 30.072, 30.075, 30.096, 30.074, 30.093, 12.834, 30.083, 30.123, 30.143, 30.225, 30.21, 30.256, 30.3, 30.262, 30.302, 30.373, 30.388, 0.056, 0.034, 30.376, 30.489, 30.521, 30.495, 0.074, 0.053, 30.819, 30.769, 31.174, 30.983, 0.061, 0.087, 31.012, 31.112, 31.053, 31.045, 0.1, 0.115, 31.331, 31.117, 30.616, 30.455, 0.046, 0.049, 30.62, 30.729, 30.679, 30.703]
timeL+=[2.827, 1.112, 0.985, 35.058, 40.097, 3.061, 11.816, 1.72, 30.019, 6.563, 30.02, 30.015, 30.023, 1.468, 30.024, 30.024, 30.016, 30.012, 30.025, 30.089, 30.036, 30.032, 30.029, 30.012, 30.029, 30.053, 30.027, 30.05, 30.03, 30.021, 30.027, 30.067, 30.04, 30.046, 30.035, 0.067, 0.089, 30.037, 30.046, 30.504, 30.046, 0.165, 0.471, 32.982, 30.742, 30.347, 30.264, 0.099, 0.528, 30.172, 30.107, 31.249, 30.888, 0.503, 0.611, 31.664, 30.052, 30.067, 30.11, 0.217, 0.791, 31.213, 32.686, 31.085, 34.874]
timeD+=[2.176, 0.151, 0.267, 32.974, 33.011, 0.36, 0.948, 0.287, 30.104, 0.448, 3.642, 15.799, 30.137, 0.243, 30.217, 30.232, 30.172, 0.597, 30.172, 30.189, 30.274, 30.214, 30.215, 30.231, 30.23, 30.43, 30.346, 30.688, 30.387, 30.559, 30.535, 31.053, 30.696, 31.015, 31.185, 0.044, 0.037, 31.039, 31.083, 31.187, 31.041, 0.065, 0.056, 33.012, 31.41, 33.709, 31.766, 0.048, 0.112, 37.313, 33.646, 33.717, 33.491, 0.157, 0.138, 34.683, 31.386, 31.49, 31.393, 0.124, 0.078, 31.673, 32.008, 31.781, 31.871]
timeP+=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
timeH+=[0.0, 0.0, 0.0, 0.004, 0.003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001, 0.004, 0.003, 0.001, 0.001, 0.0, 0.0, 0.0, 0.0, 0.001, 0.0, 0.0, 0.0, 0.0, 0.003, 0.001, 0.002, 0.001, 0.0, 0.0, 0.0, 0.0, 0.002, 0.002, 0.0, 0.0, 0.0, 0.0, 0.002, 0.001, 0.0, 0.0, 0.005, 0.005, 0.001, 0.002]

# Trier les temps pour chaque méthode
timeS.sort()
timeD.sort()
timeL.sort()
timeP.sort()

# Nombre cumulé d'instances résolues
instances_S = np.arange(1, len(timeS) + 1)
instances_D = np.arange(1, len(timeD) + 1)
instances_L = np.arange(1, len(timeL) + 1)
instances_P = np.arange(1, len(timeP) + 1)

# Création du graphique avec plt.step() pour un affichage en marches
plt.figure(figsize=(8, 6))

plt.step(timeS, instances_S, label="Résolution du Problème Statique", color='blue', linewidth=2, where='post')
plt.step(timeD, instances_D, label="Résolution par dualisation", color='orange', linewidth=2, where='post')
plt.step(timeL, instances_L, label="Résolution par B&C", color='purple', linewidth=2, where='post')
#plt.step(timeP, instances_P, label="Résolution par plans coupants", color='red', linewidth=2, where='post')

# Ajouter labels et légende
plt.xlabel("Temps (s)")
plt.ylabel("Nombre d'instances résolues")
plt.title("Diagramme de performances")
plt.legend()
plt.grid()
plt.xlim(0, 30)  # Ajuste les limites selon tes besoins
plt.ylim(0, 28)

"""
# Afficher le graphique
plt.show()

Htd=[2854.0, 3417.8999999999996, 4941.8899999999985, 1856.2640000000004, 18941.567399999993, 5568.719008264463, 8565.355371900827, 4092.5208333333335, 6913.222222222223, 3602.1420118343194, 6117.745562130176, 6502.530612244898, 7394.91836734694, 5544.062222222223, 7875.11111111111, 712.4921875, 9369.76171875, 593.726643598616, 8933.107266435987, 690.9629629629628, 10213.222222222223, 814.2520775623268, 8233.565096952907, 694.6774999999998, 9548.16, 763.9232, 10349.2192, 914.2777777777778, 15734.03, 662.4285714285716, 18282.918367346938, 1277.708125, 15454.517499999996, 1025.7081481481482, 17932.387654320988, 1762.4, 3314.12, 914.0015999999998, 13547.1344, 808.8413223140496, 16167.772892561983, 3239.6388888888887, 3031.8888888888887, 1112.5111111111112, 24226.376666666663, 1147.5467455621301, 27469.93017751478, 2226.020408163265, 3022.204081632653, 2036.112653061225, 16527.082040816327, 913.9804444444442, 24599.51466666666, 3240.8125, 4005.6875, 945.9451562500002, 20443.159999999996, 1678.58062283737, 16703.671003460207, 3199.2592592592596, 4480.962962962963, 1038.8322222222223, 39946.55061728396, 1093.8429916897503, 41940.332742382256]
Htsd=[2746.6000000000004, 6175.399999999999, 5868.659999999999, 2113.8143999999998, 18615.497199999998, 4927.190082644627, 7786.636363636363, 4432.895833333333, 6813.840277777778, 4202.260355029585, 8026.242603550295, 5753.020408163265, 8441.693877551023, 5468.613333333334, 7950.773333333333, 764.80859375, 10707.85546875, 584.9134948096887, 9377.8615916955, 724.0617283950617, 11616.978395061727, 594.4681440443214, 10437.387811634348, 662.7325000000001, 10715.800000000001, 807.9968, 10600.9184, 667.5833333333331, 14822.710000000001, 906.7085714285714, 17806.98530612245, 1330.405, 13667.907499999996, 1025.8903703703706, 17357.362962962958, 1640.4, 3478.4800000000005, 556.048, 13971.761600000003, 929.4026446280992, 17095.88892561983, 3350.8611111111113, 3364.6666666666665, 1131.0083333333334, 21589.474166666667, 1115.1384615384616, 25945.318343195264, 3160.551020408163, 3267.326530612245, 2237.321632653062, 15647.214489795915, 937.8204444444444, 20771.556799999988, 3240.8125, 4725.5625, 1017.9353124999999, 21177.669999999995, 1849.6256055363317, 16447.863806228368, 3727.4814814814818, 4894.543209876544, 1181.802222222222, 37507.43950617282, 1184.6403324099724, 39627.17318559556]
Ht=[2746.6000000000004, 3756.15, 6374.619999999999, 1543.7695999999999, 16061.452199999982, 5154.834710743802, 7379.198347107438, 3976.3958333333335, 7067.201388888889, 3602.1420118343194, 6525.467455621301, 5539.204081632653, 9266.57142857143, 6208.475555555557, 8320.288888888888, 709.7421875, 10170.7578125, 534.726643598616, 9082.986159169552, 975.4691358024692, 10845.969135802467, 577.7146814404432, 9375.32132963989, 608.215, 11947.760000000002, 823.8608000000002, 9816.809600000002, 769.861111111111, 15196.719999999996, 735.9485714285713, 17532.837551020406, 1248.201875, 11084.097499999996, 902.8192592592593, 17109.671604938274, 1640.4, 3478.48, 566.5791999999999, 13451.999999999998, 892.4479338842975, 15821.513388429756, 3239.6388888888887, 3354.6666666666665, 929.7969444444449, 20664.26666666666, 1060.8366863905328, 25546.896094674554, 2099.530612244898, 3463.204081632653, 2006.0644897959182, 11806.660612244901, 707.7937777777774, 20252.22026666666, 3240.8125, 4449.1875, 663.90578125, 18123.729999999996, 1485.694809688581, 12619.7046366782, 4295.148148148148, 4594.716049382716, 1421.6922222222217, 38272.48888888889, 969.5916897506925, 38925.229916897486]
Hd=[2703.6000000000004, 5153.4, 6458.479999999999, 5036.416, 55734.56200000001, 7354.01652892562, 8848.115702479337, 7473.458333333334, 7642.506944444444, 7276.047337278108, 8579.431952662724, 7338.489795918367, 8830.877551020409, 9250.36888888889, 9066.542222222224, 992.4765625, 11818.6875, 1158.508650519031, 12520.584775086507, 1236.1481481481483, 12889.978395061726, 1171.2603878116342, 12813.952908587258, 1057.0125, 12492.759999999997, 1481.5343999999998, 17292.8496, 1546.472222222222, 19946.84, 2005.1714285714281, 24596.322448979587, 2435.58, 24939.149999999994, 2577.4681481481493, 25585.53827160493, 1762.4, 3314.12, 2584.9712000000004, 25182.6592, 2959.0112396694212, 29516.04793388429, 4503.833333333333, 3032.8888888888887, 3956.021944444445, 39823.185, 3613.203550295857, 36971.85254437869, 1963.9183673469388, 4047.3061224489793, 4013.91918367347, 32899.131836734705, 3333.5671111111105, 41395.402666666654, 3357.234375, 4009.1875, 4374.933906249999, 43496.05750000005, 4772.251903114188, 50323.73148788929, 5301.037037037037, 5691.382716049382, 5258.612222222226, 57454.05679012347, 4896.930969529087, 64832.24587257615]
H1sd=[2746.6000000000004, 6006.900000000001, 6543.189999999999, 5467.062399999997, 56325.522399999994, 8041.603305785124, 7666.082644628099, 6786.958333333333, 8392.22222222222, 7895.96449704142, 7754.615384615385, 7847.775510204081, 9524.163265306122, 7047.102222222225, 8602.577777777777, 1114.05859375, 9834.46484375, 965.2076124567473, 11434.425605536335, 1416.2222222222224, 11881.700617283952, 1105.3684210526317, 13420.121883656508, 1197.6425, 12287.48, 1434.2479999999996, 14964.008000000003, 1765.083333333333, 19504.37999999999, 2052.148571428571, 21793.153469387755, 2603.7468750000003, 24492.389999999996, 2424.8548148148143, 26012.350617283948, 1640.4, 3314.12, 2578.860800000001, 26449.1152, 3016.2872727272725, 31118.35471074379, 3644.5277777777774, 3032.8888888888887, 3630.552777777778, 39161.38166666668, 3394.8840236686387, 37713.20875739644, 4140.469387755102, 4128.714285714286, 4115.373061224489, 35916.79306122449, 3604.4293333333326, 42746.35039999999, 4418.1875, 4222.9375, 4312.918437499999, 43268.450000000026, 4382.940484429065, 45552.19114186849, 5948.037037037037, 5603.135802469136, 5418.262222222223, 54249.599999999984, 5291.049418282547, 64595.893074792264]

max_per_index = [max(Htd[i], Htsd[i], Ht[i], H1sd[i], Hd[i]) for i in range(len(Htd))]

# Normalisation de chaque liste
Htd = [Htd[i] / max_per_index[i] for i in range(len(Htd))]
Htsd = [Htsd[i] / max_per_index[i] for i in range(len(Htsd))]
Ht = [Ht[i] / max_per_index[i] for i in range(len(Ht))]
H1sd = [H1sd[i] / max_per_index[i] for i in range(len(H1sd))]
Hd = [Hd[i] / max_per_index[i] for i in range(len(Hd))]

def reorganize(lst):
    return [lst[i] for i in range(1, len(lst), 2)] + [lst[i] for i in range(0, len(lst), 2)]

# Réorganisation des listes
Htd = reorganize(Htd)
Htsd = reorganize(Htsd)
Ht = reorganize(Ht)
H1sd = reorganize(H1sd)
Hd = reorganize(Hd)

# Tracé des courbes
plt.figure(figsize=(12, 6))
plt.plot(Htd, label="Htd")
plt.plot(Htsd, label="Htsd")
plt.plot(Ht, label="Ht")
plt.plot(H1sd, label="H1sd"  )
plt.plot(Hd, label="Hd" )


plt.xlabel("Instances")
plt.ylabel("Valeur")
plt.title("Comparaison des Heuristiques")
plt.legend()
plt.grid(True)
plt.show()